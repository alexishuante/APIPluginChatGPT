model TrafficLightSTM

class Snapshot
operations
getNext() : Snapshot = self.nextT.nextS

getPost() : Set(Snapshot) = Set{self.getNext()}->closure(getNext())->excluding(null)

getPrevious() : Snapshot = self.beforeT.beforeS

getPre() : Set(Snapshot) = Set{self.getPrevious()}->closure(getPrevious())->excluding(null)

sat(e : OclAny) : Boolean = true

end

class Button
attributes
counter : Boolean
snapshotObjectId : Integer
operations
getCurrentSnapshot() : Snapshot = self.snapshot

getNext() : Button = self.snapshot.getNext().button->any(b | self.snapshotObjectId = b.snapshotObjectId)

getPost() : Set(Button) = Set{self.getNext()}->closure(getNext())->excluding(null)

getPrevious() : Button = self.snapshot.getPrevious().button->any(b | self.snapshotObjectId = b.snapshotObjectId)

getPre() : Set(Button) = Set{self.getPrevious()}->closure(getPrevious())->excluding(null)

atSnapshot(refSnap : Snapshot) : Button = refSnap.button->any(b | self.snapshotObjectId = b.snapshotObjectId)

end

class TrafficLight
attributes
carLight : Color
pedLight : Color
requested : Boolean
snapshotObjectId : Integer
operations
getCurrentSnapshot() : Snapshot = self.snapshot

getNext() : TrafficLight = self.snapshot.getNext().trafficlight->any(t | self.snapshotObjectId = t.snapshotObjectId)

getPost() : Set(TrafficLight) = Set{self.getNext()}->closure(getNext())->excluding(null)

getPrevious() : TrafficLight = self.snapshot.getPrevious().trafficlight->any(t | self.snapshotObjectId = t.snapshotObjectId)

getPre() : Set(TrafficLight) = Set{self.getPrevious()}->closure(getPrevious())->excluding(null)

atSnapshot(refSnap : Snapshot) : TrafficLight = refSnap.trafficlight->any(t | self.snapshotObjectId = t.snapshotObjectId)

end

class FirstSnapshot < Snapshot
end

class LastSnapshot < Snapshot
end

association PedButtonTrafficLight between
TrafficLight[1] role light
Button[1..*] role button
end
enum Color {Green, Red}

abstract class Transition
end

class Button_requestPass < Transition
attributes
result : Boolean
transitionContext : Button
end

class TrafficLight_switchCarLight < Transition
attributes
result : Color
transitionContext : TrafficLight
end

class TrafficLight_switchPedLight < Transition
attributes
result : Color
transitionContext : TrafficLight
end

composition SnapshotButton between
Snapshot[1] role snapshot
Button[0..*] role button
end
composition SnapshotTrafficLight between
Snapshot[1] role snapshot
TrafficLight[0..*] role trafficlight
end
association beforeTransition between
Snapshot[1] role beforeS
Transition[0..1] role nextT
end
association afterTransition between
Snapshot[1] role nextS
Transition[0..1] role beforeT
end

constraints
context Snapshot
inv acyclicScenareo: self.getPost()->excludes(self) and self.getPre()->excludes(self)

context Snapshot
inv sameSnapshot: Snapshot.allInstances()->forAll(s | (self.nextT = s.nextT and self.beforeT = s.beforeT) implies self = s)

context Snapshot
inv oneScenareo: Snapshot.allInstances()->select(oclIsTypeOf(FirstSnapshot))->size() <= 1 and Snapshot.allInstances()->select(oclIsTypeOf(LastSnapshot))->size() <= 1 and Snapshot.allInstances()->select(not (oclIsTypeOf(FirstSnapshot) or oclIsTypeOf(LastSnapshot)))->forAll(getPre()->exists(oclIsTypeOf(FirstSnapshot)) and getPost()->exists(oclIsTypeOf(LastSnapshot)))

context Snapshot
inv firstLast: Snapshot.allInstances()->size() > 1 implies ((self.beforeT.oclIsUndefined() implies self.oclIsTypeOf(FirstSnapshot)) and (self.nextT.oclIsUndefined() implies self.oclIsTypeOf(LastSnapshot)))

context Button
inv uniqueIds: Button.allInstances()->forAll(b : Button | (b.snapshot = self.snapshot and b.snapshotObjectId = self.snapshotObjectId) implies b = self)


context TrafficLight
inv uniqueIds: TrafficLight.allInstances()->forAll(t : TrafficLight | (t.snapshot = self.snapshot and t.snapshotObjectId = self.snapshotObjectId) implies t = self)

context TrafficLight
inv validLinking_PedButtonTrafficLight: Set{self.snapshot.button}->flatten()->includesAll(Set{self.button}->flatten()->excluding(null))


context Transition
inv sameTransition: Transition.allInstances()->forAll(t : Transition | (self.nextS = t.nextS and self.beforeS = t.beforeS) implies self = t)

context Button_requestPass
inv validContext: self.transitionContext.snapshot = self.beforeS

context Button_requestPass
inv post1: (self.transitionContext.getNext().light.requested = true)

context Button_requestPass
inv pre1: (self.transitionContext.light.pedLight = Color::Red)

context TrafficLight_switchCarLight
inv validContext: self.transitionContext.snapshot = self.beforeS

context TrafficLight_switchPedLight
inv validContext: self.transitionContext.snapshot = self.beforeS

context TrafficLight_switchPedLight
inv pre1: (self.transitionContext.requested = true)

context TrafficLight_switchPedLight
inv post2: (self.transitionContext.getNext().requested = false)


context TrafficLight
inv: not(self.requested = true implies
(let CS:Snapshot = self.getCurrentSnapshot() 
in let FS:Set(Snapshot) = CS.getPost() 
in let FSQ:Set(Snapshot) = FS->select(s | self.atSnapshot(s).carLight = #Red) 
in let FSP:Set(Snapshot) = FS->including(CS)->select(s | self.atSnapshot(s).pedLight = #Red) 
in if (FSQ->size()>0) then (if (FSP->size()>0) then (FSQ->exists(s | FSP-(s.getPost()->including(s)) = FS->including(CS)-(s.getPost()->including(s)))) else false endif) else (FSP = FS->including(CS)) endif))

context TrafficLight
inv: not(self.requested = true implies
(let CS:Snapshot = self.getCurrentSnapshot() 
in let FS:Set(Snapshot) = CS.getPost() 
in let FSQ:Set(Snapshot) = FS->select(s | self.atSnapshot(s).carLight = #Red) 
in let FSP:Set(Snapshot) = FS->including(CS)->select(s | self.atSnapshot(s).pedLight = #Red) 
in if (FSQ->size()>0) then (if (FSP->size()>0) then (FSQ->exists(s | FSP-(s.getPost()->including(s)) = FS->including(CS)-(s.getPost()->including(s)))) else false endif) else (FSP = FS->including(CS)) endif))

